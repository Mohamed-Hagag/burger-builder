{"version":3,"sources":["components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Login/Login.js","containers/Auth/Auth.js","components/UI/Input/Input.js","utility/utility.js"],"names":["module","exports","Login","state","controls","email","elementType","elementConfig","type","placeholder","errorMessage","value","valid","validation","required","isEmail","touched","password","minLength","formIsValid","isSignup","inputChangeHandler","e","id","updatedRegisterForm","updatedFormElement","target","inputValidation","setState","errorHandler","submitHandler","preventDefault","props","onAuth","switchHandler","onSwitch","prevProps","prevState","key","this","registerFormArray","push","config","form","map","el","Input","invalid","elementtype","changed","error","message","style","fontWeight","color","loading","Spinner","loginPage","className","styles","Auth","onSubmit","Button","disabled","btnType","clicked","isAuth","to","building","Component","connect","auth","token","burgerBuilder","userOrderId","dispatch","actions","userName","isName","rePassword","address","mobile","isMobile","confirmPassword","contactData","landline","authPage","input","inputElement","inputClasses","InputElement","customClassName","ContactDataInputElement","Invalid","margin","textAlign","join","onChange","onBlur","ContactDataInput","Label","label","width","rules","isValid","trim","length","maxLength","test","String","toLowerCase"],"mappings":"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","file":"static/js/4.a888de17.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1V4hE\",\"ContactDataInput\":\"Input_ContactDataInput__2dU67\",\"ContactDataInputElement\":\"Input_ContactDataInputElement__1GL_K\",\"Label\":\"Input_Label__3DpAD\",\"InputElement\":\"Input_InputElement__rhet_\",\"Invalid\":\"Input_Invalid__ew1WL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Mp-1\"};","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport styles from \"../Auth.module.css\";\r\nimport * as actions from \"../../../store/actions/index\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport { inputValidation } from \"../../../utility/utility\";\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your E-mail\",\r\n        },\r\n        errorMessage: \"Please enter a valid E-mail\",\r\n        value: \"\",\r\n        valid: false,\r\n        validation: { required: true, isEmail: true },\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n        },\r\n        errorMessage: \"Please enter a Password\",\r\n        value: \"\",\r\n        valid: false,\r\n        validation: { required: true, minLength: 6 },\r\n        touched: false,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n    isSignup: true,\r\n  };\r\n  componentDidUpdate(prevProps, prevState) {\r\n    let formIsValid = true;\r\n    for (let key in this.state.controls) {\r\n      formIsValid = this.state.controls[key].valid && formIsValid;\r\n    }\r\n    if (prevState.formIsValid !== formIsValid) {\r\n      this.setState({ formIsValid: formIsValid });\r\n    }\r\n  }\r\n\r\n  inputChangeHandler = (e, id) => {\r\n    const updatedRegisterForm = { ...this.state.controls };\r\n    const updatedFormElement = { ...updatedRegisterForm[id] };\r\n    updatedFormElement.value = e.target.value;\r\n    updatedFormElement.valid = inputValidation(\r\n      updatedFormElement.validation,\r\n      updatedFormElement.value\r\n    );\r\n    updatedRegisterForm[id] = updatedFormElement;\r\n    this.setState({ controls: updatedRegisterForm });\r\n  };\r\n\r\n  errorHandler = (id) => {\r\n    const updatedRegisterForm = { ...this.state.controls };\r\n    const updatedFormElement = { ...updatedRegisterForm[id] };\r\n    updatedFormElement.touched = true;\r\n    updatedRegisterForm[id] = updatedFormElement;\r\n    this.setState({ controls: updatedRegisterForm });\r\n  };\r\n\r\n  submitHandler = (e) => {\r\n    e.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.props.isSignup\r\n    );\r\n  };\r\n\r\n  switchHandler = () => {\r\n    this.props.onSwitch();\r\n  };\r\n\r\n  render() {\r\n    let registerFormArray = [];\r\n    for (let key in this.state.controls) {\r\n      registerFormArray.push({ id: key, config: this.state.controls[key] });\r\n    }\r\n    let form = (\r\n      <Fragment>\r\n        {registerFormArray.map((el) => {\r\n          return (\r\n            <Input\r\n              invalid={!el.config.valid}\r\n              touched={el.config.touched}\r\n              errorMessage={el.config.errorMessage}\r\n              key={el.id}\r\n              elementtype={el.config.elementType}\r\n              elementConfig={el.config.elementConfig}\r\n              value={el.config.value}\r\n              changed={(e) => this.inputChangeHandler(e, el.id)}\r\n              errorHandler={() => this.errorHandler(el.id)}\r\n            />\r\n          );\r\n        })}\r\n      </Fragment>\r\n    );\r\n\r\n    let errorMessage = null;\r\n    if (this.props.error) {\r\n      if (this.props.error.message === \"EMAIL_NOT_FOUND\") {\r\n        errorMessage = (\r\n          <p style={{ fontWeight: \"500\", color: \"red\" }}>\r\n            This Email doesn't exist\r\n          </p>\r\n        );\r\n      }\r\n      if (this.props.error.message === \"INVALID_PASSWORD\") {\r\n        errorMessage = (\r\n          <p style={{ fontWeight: \"500\", color: \"red\" }}>Wrong Password</p>\r\n        );\r\n      }\r\n    }\r\n    if (this.props.loading && this.props.error == null) {\r\n      form = <Spinner />;\r\n    }\r\n    let loginPage = (\r\n      <div className={styles.Auth}>\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          {errorMessage}\r\n          <Button disabled={!this.state.formIsValid} btnType=\"Success\">\r\n            SUBMIT\r\n          </Button>\r\n        </form>\r\n        <Button btnType=\"Success\" clicked={this.switchHandler}>\r\n          SWITCH TO {this.props.isSignup ? \"SIGNIN\" : \"SIGNUP\"}\r\n        </Button>\r\n      </div>\r\n    );\r\n    if (this.props.isAuth) {\r\n      loginPage = <Redirect to=\"/\" />;\r\n      if (this.props.building) {\r\n        loginPage = <Redirect to=\"checkout\" />;\r\n      }\r\n    }\r\n\r\n    return loginPage;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuth: state.auth.token !== null,\r\n    building: state.burgerBuilder.building,\r\n    userOrderId: state.auth.userOrderId,\r\n    isSignup: state.auth.isSignup,\r\n    email: state.auth.email,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(actions.auth(email, password, isSignup)),\r\n    onSwitch: () => dispatch(actions.authSwitch()),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport styles from \"./Auth.module.css\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport { inputValidation } from \"../../utility/utility\";\r\nimport Login from \"./Login/Login\";\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      userName: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Name\",\r\n        },\r\n        errorMessage: \"Please enter a valid Name\",\r\n        value: \"\",\r\n        valid: false,\r\n        validation: { required: true, isName: true },\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your E-mail\",\r\n        },\r\n        errorMessage: \"Please enter a valid E-mail\",\r\n        value: \"\",\r\n        valid: false,\r\n        validation: { required: true, isEmail: true },\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n        },\r\n        errorMessage: \"Please enter a valid Password\",\r\n        value: \"\",\r\n        valid: false,\r\n        validation: { required: true, minLength: 6 },\r\n        touched: false,\r\n      },\r\n      rePassword: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Re-Password\",\r\n        },\r\n        errorMessage: \"Password doesn't match\",\r\n        value: \"\",\r\n        valid: false,\r\n        validation: { required: true, minLength: 6 },\r\n        touched: false,\r\n      },\r\n\r\n      address: {\r\n        elementType: \"textarea\",\r\n        elementConfig: {\r\n          type: \"textarea\",\r\n          placeholder: \"Your Address\",\r\n        },\r\n        errorMessage: \"Please enter a valid Address\",\r\n        value: \"\",\r\n        valid: false,\r\n        validation: { required: true, minLength: 6 },\r\n        touched: false,\r\n      },\r\n      mobile: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Mobile\",\r\n        },\r\n        errorMessage: \"Please enter a valid Mobile\",\r\n        value: \"\",\r\n        valid: false,\r\n        validation: { required: true, isMobile: true },\r\n        touched: false,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n    isSignup: true,\r\n  };\r\n  componentDidUpdate(prevProps, prevState) {\r\n    let formIsValid = true;\r\n    for (let key in this.state.controls) {\r\n      formIsValid = this.state.controls[key].valid && formIsValid;\r\n    }\r\n    if (prevState.formIsValid !== formIsValid) {\r\n      this.setState({ formIsValid: formIsValid });\r\n    }\r\n  }\r\n\r\n  inputChangeHandler = (e, id) => {\r\n    const updatedRegisterForm = { ...this.state.controls };\r\n    const updatedFormElement = { ...updatedRegisterForm[id] };\r\n    updatedFormElement.value = e.target.value;\r\n    updatedFormElement.valid = inputValidation(\r\n      updatedFormElement.validation,\r\n      updatedFormElement.value\r\n    );\r\n    updatedRegisterForm[id] = updatedFormElement;\r\n\r\n    const password = { ...updatedRegisterForm.password };\r\n    const confirmPassword = { ...updatedRegisterForm.rePassword };\r\n    if (confirmPassword.value !== password.value) {\r\n      confirmPassword.valid = false;\r\n    } else {\r\n      confirmPassword.valid = true;\r\n    }\r\n    updatedRegisterForm.rePassword = confirmPassword;\r\n\r\n    this.setState({ controls: updatedRegisterForm });\r\n  };\r\n  errorHandler = (id) => {\r\n    const updatedRegisterForm = { ...this.state.controls };\r\n    const updatedFormElement = { ...updatedRegisterForm[id] };\r\n    updatedFormElement.touched = true;\r\n    updatedRegisterForm[id] = updatedFormElement;\r\n    this.setState({ controls: updatedRegisterForm });\r\n  };\r\n  submitHandler = (e) => {\r\n    e.preventDefault();\r\n    const contactData = {\r\n      userName: this.state.controls.userName.value,\r\n      email: this.state.controls.email.value,\r\n      mobile: this.state.controls.mobile.value,\r\n      address: this.state.controls.address.value,\r\n      landline: this.state.controls.landline.value,\r\n    };\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.props.isSignup,\r\n      contactData\r\n    );\r\n  };\r\n\r\n  switchHandler = (e) => {\r\n    this.props.onSwitch();\r\n  };\r\n\r\n  render() {\r\n    let registerFormArray = [];\r\n    for (let key in this.state.controls) {\r\n      registerFormArray.push({ id: key, config: this.state.controls[key] });\r\n    }\r\n    let form = (\r\n      <Fragment>\r\n        {registerFormArray.map((el) => {\r\n          return (\r\n            <Input\r\n              invalid={!el.config.valid}\r\n              touched={el.config.touched}\r\n              errorMessage={el.config.errorMessage}\r\n              key={el.id}\r\n              elementtype={el.config.elementType}\r\n              elementConfig={el.config.elementConfig}\r\n              value={el.config.value}\r\n              changed={(e) => this.inputChangeHandler(e, el.id)}\r\n              errorHandler={() => this.errorHandler(el.id)}\r\n            />\r\n          );\r\n        })}\r\n      </Fragment>\r\n    );\r\n\r\n    let errorMessage = null;\r\n    if (this.props.error) {\r\n      if (this.props.error.message === \"EMAIL_EXISTS\") {\r\n        errorMessage = (\r\n          <p style={{ fontWeight: \"500\", color: \"red\" }}>\r\n            This Email is already exists\r\n          </p>\r\n        );\r\n      }\r\n      if (this.props.error.message === \"INVALID_PASSWORD\") {\r\n        errorMessage = (\r\n          <p style={{ fontWeight: \"500\", color: \"red\" }}>Wrong Password</p>\r\n        );\r\n      }\r\n    }\r\n    if (this.props.loading && this.props.error == null) {\r\n      form = <Spinner />;\r\n    }\r\n    let authPage = (\r\n      <div className={styles.Auth}>\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          {errorMessage}\r\n          <Button disabled={!this.state.formIsValid} btnType=\"Success\">\r\n            SUBMIT\r\n          </Button>\r\n        </form>\r\n        <Button btnType=\"Success\" clicked={this.switchHandler}>\r\n          SWITCH TO {this.props.isSignup ? \"SIGNIN\" : \"SIGNUP\"}\r\n        </Button>\r\n      </div>\r\n    );\r\n    if (this.props.isAuth) {\r\n      authPage = <Redirect to=\"/\" />;\r\n      if (this.props.building) {\r\n        authPage = <Redirect to=\"checkout\" />;\r\n      }\r\n    }\r\n    if (!this.props.isSignup) {\r\n      authPage = <Login />;\r\n    }\r\n\r\n    return authPage;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuth: state.auth.token !== null,\r\n    building: state.burgerBuilder.building,\r\n    userOrderId: state.auth.userOrderId,\r\n    isSignup: state.auth.isSignup,\r\n    token: state.auth.token,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignup, contactData) =>\r\n      dispatch(actions.auth(email, password, isSignup, contactData)),\r\n    onSwitch: () => dispatch(actions.authSwitch()),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","import React, { Fragment } from \"react\";\r\nimport styles from \"./Input.module.css\";\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  let errorMessage = null;\r\n  let inputClasses = [styles.InputElement];\r\n\r\n  if (props.customClassName) {\r\n    inputClasses = [styles.ContactDataInputElement];\r\n  }\r\n\r\n  if (props.invalid && props.touched) {\r\n    inputClasses.push(styles.Invalid);\r\n    errorMessage = (\r\n      <p\r\n        style={{\r\n          margin: \"5px 0\",\r\n          color: \"red\",\r\n          textAlign: \"left\",\r\n        }}\r\n      >\r\n        {props.errorMessage}\r\n      </p>\r\n    );\r\n  }\r\n\r\n  switch (props.elementtype) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n          onBlur={props.errorHandler}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n          onBlur={props.errorHandler}\r\n        />\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n  }\r\n  return (\r\n    <Fragment>\r\n      {\" \"}\r\n      <div\r\n        className={\r\n          props.customClassName ? styles.ContactDataInput : styles.Input\r\n        }\r\n      >\r\n        <label className={styles.Label}>{props.label}</label>\r\n        <div style={props.customClassName ? { width: \"80%\" } : null}>\r\n          {inputElement}\r\n          {errorMessage}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default input;\r\n","export const inputValidation = (rules, value) => {\r\n  let isValid = true;\r\n  if (rules.required) {\r\n    isValid = value.trim() !== \"\" && isValid;\r\n  }\r\n  if (rules.minLength) {\r\n    isValid = value.length >= rules.minLength && isValid;\r\n  }\r\n  if (rules.maxLength) {\r\n    isValid = value.length <= rules.maxLength && isValid;\r\n  }\r\n  if (rules.isEmail) {\r\n    const pattern = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    isValid = pattern.test(String(value).toLowerCase()) && isValid;\r\n  }\r\n  if (rules.isMobile) {\r\n    const pattern = /^(010|011|012|015)[0-9]{8}$/;\r\n    isValid = pattern.test(String(value).toLowerCase()) && isValid;\r\n  }\r\n  if (rules.isName) {\r\n    const pattern = /^[a-zA-Z]{2,10}$/;\r\n    isValid = pattern.test(String(value).toLowerCase()) && isValid;\r\n  }\r\n\r\n  return isValid;\r\n};\r\n"],"sourceRoot":""}