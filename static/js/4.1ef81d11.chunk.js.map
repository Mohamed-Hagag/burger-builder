{"version":3,"sources":["utility/utility.js","containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["inputValidation","rules","value","isValid","required","trim","minLength","length","maxLength","isEmail","test","String","toLowerCase","module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","valuetype","valid","validation","touched","password","formIsValid","isSignup","inputChangeHandler","e","id","updatedRegisterForm","updatedFormElement","target","setState","errorHandler","submitHandler","preventDefault","props","onAuth","switchHandler","prevState","prevProps","key","this","registerFormArray","push","config","form","map","el","invalid","elementtype","changed","errorMessage","error","message","style","fontWeight","color","loading","authPage","className","styles","onSubmit","disabled","btnType","clicked","isAuth","to","building","Component","connect","auth","token","burgerBuilder","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","margin","textAlign","join","onChange","onBlur","Label","label"],"mappings":"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","file":"static/js/4.1ef81d11.chunk.js","sourcesContent":["export const inputValidation = (rules, value) => {\r\n  let isValid = true;\r\n  if (rules.required) {\r\n    isValid = value.trim() !== \"\" && isValid;\r\n  }\r\n  if (rules.minLength) {\r\n    isValid = value.length >= rules.minLength && isValid;\r\n  }\r\n  if (rules.maxLength) {\r\n    isValid = value.length <= rules.maxLength && isValid;\r\n  }\r\n  if (rules.isEmail) {\r\n    const pattern = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    isValid = pattern.test(String(value).toLowerCase()) && isValid;\r\n  }\r\n\r\n  return isValid;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Mp-1\"};","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport styles from \"./Auth.module.css\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport { inputValidation } from \"../../utility/utility\";\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your E-mail\",\r\n          valuetype: \"Mail\",\r\n        },\r\n        value: \"\",\r\n        valid: false,\r\n        validation: { required: true, isEmail: true },\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n          valuetype: \"Password\",\r\n        },\r\n        value: \"\",\r\n        valid: false,\r\n        validation: { required: true, minLength: 6 },\r\n        touched: false,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n    isSignup: true,\r\n  };\r\n  componentDidUpdate(prevProps, prevState) {\r\n    let formIsValid = true;\r\n    for (let key in this.state.controls) {\r\n      formIsValid = this.state.controls[key].valid && formIsValid;\r\n    }\r\n    if (prevState.formIsValid !== formIsValid) {\r\n      this.setState({ formIsValid: formIsValid });\r\n    }\r\n  }\r\n\r\n  inputChangeHandler = (e, id) => {\r\n    const updatedRegisterForm = { ...this.state.controls };\r\n    const updatedFormElement = { ...updatedRegisterForm[id] };\r\n    updatedFormElement.value = e.target.value;\r\n    updatedFormElement.valid = inputValidation(\r\n      updatedFormElement.validation,\r\n      updatedFormElement.value\r\n    );\r\n\r\n    updatedRegisterForm[id] = updatedFormElement;\r\n    this.setState({ controls: updatedRegisterForm });\r\n  };\r\n  errorHandler = (id) => {\r\n    const updatedRegisterForm = { ...this.state.controls };\r\n    const updatedFormElement = { ...updatedRegisterForm[id] };\r\n    updatedFormElement.touched = true;\r\n    updatedRegisterForm[id] = updatedFormElement;\r\n    this.setState({ controls: updatedRegisterForm });\r\n  };\r\n  submitHandler = (e) => {\r\n    e.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignup\r\n    );\r\n  };\r\n\r\n  switchHandler = () => {\r\n    this.setState((prevState) => {\r\n      return { isSignup: !prevState.isSignup };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let registerFormArray = [];\r\n    for (let key in this.state.controls) {\r\n      registerFormArray.push({ id: key, config: this.state.controls[key] });\r\n    }\r\n    let form = (\r\n      <Fragment>\r\n        {registerFormArray.map((el) => {\r\n          return (\r\n            <Input\r\n              invalid={!el.config.valid}\r\n              touched={el.config.touched}\r\n              key={el.id}\r\n              elementtype={el.config.elementType}\r\n              elementConfig={el.config.elementConfig}\r\n              value={el.config.value}\r\n              changed={(e) => this.inputChangeHandler(e, el.id)}\r\n              errorHandler={() => this.errorHandler(el.id)}\r\n            />\r\n          );\r\n        })}\r\n      </Fragment>\r\n    );\r\n    let errorMessage = null;\r\n    if (this.props.error) {\r\n      if (this.props.error.message === \"EMAIL_EXISTS\") {\r\n        errorMessage = (\r\n          <p style={{ fontWeight: \"500\", color: \"red\" }}>\r\n            This Email is already exists\r\n          </p>\r\n        );\r\n      }\r\n      if (this.props.error.message === \"INVALID_PASSWORD\") {\r\n        errorMessage = (\r\n          <p style={{ fontWeight: \"500\", color: \"red\" }}>Wrong Password</p>\r\n        );\r\n      }\r\n    }\r\n    if (this.props.loading && this.props.error == null) {\r\n      form = <Spinner />;\r\n    }\r\n    let authPage = (\r\n      <div className={styles.Auth}>\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          {errorMessage}\r\n          <Button disabled={!this.state.formIsValid} btnType=\"Success\">\r\n            SUBMIT\r\n          </Button>\r\n        </form>\r\n        <Button btnType=\"Success\" clicked={this.switchHandler}>\r\n          SWITCH TO {this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"}\r\n        </Button>\r\n      </div>\r\n    );\r\n    if (this.props.isAuth) {\r\n      authPage = <Redirect to=\"/\" />;\r\n      if (this.props.building) {\r\n        authPage = <Redirect to=\"checkout\" />;\r\n      }\r\n    }\r\n\r\n    return <Fragment> {authPage}</Fragment>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuth: state.auth.token !== null,\r\n    building: state.burgerBuilder.building,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(actions.auth(email, password, isSignup)),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","import React from \"react\";\r\nimport styles from \"./Input.module.css\";\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  let errorMessage = null;\r\n  const inputClasses = [styles.InputElement];\r\n\r\n  if (props.invalid && props.touched) {\r\n    inputClasses.push(styles.Invalid);\r\n    errorMessage = (\r\n      <p style={{ margin: \"5px 0\", color: \"red\", textAlign: \"left\" }}>\r\n        Please enter a valid {props.elementConfig.valuetype}\r\n      </p>\r\n    );\r\n  }\r\n\r\n  switch (props.elementtype) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n          onBlur={props.errorHandler}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n  }\r\n  return (\r\n    <div className={styles.input}>\r\n      <label className={styles.Label}>{props.label}</label>\r\n      {inputElement}\r\n      {errorMessage}\r\n    </div>\r\n  );\r\n};\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1V4hE\",\"Label\":\"Input_Label__3DpAD\",\"InputElement\":\"Input_InputElement__rhet_\",\"Invalid\":\"Input_Invalid__ew1WL\"};"],"sourceRoot":""}