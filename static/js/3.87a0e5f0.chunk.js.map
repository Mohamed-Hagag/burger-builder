{"version":3,"sources":["components/UI/Input/Input.js","utility/utility.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummery/CheckoutSummery.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummery/CheckoutSummery.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["input","props","inputElement","errorMessage","inputClasses","styles","InputElement","customClassName","ContactDataInputElement","invalid","touched","push","Invalid","style","margin","color","textAlign","elementtype","className","join","elementConfig","value","onChange","changed","onBlur","errorHandler","ContactDataInput","Input","Label","label","width","inputValidation","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","String","toLowerCase","isMobile","isName","module","exports","checkoutSummery","CheckoutSummery","Burger","ingredients","Button","btnType","clicked","checkoutCanceled","checkoutContinued","ContactData","state","orderForm","address","elementType","type","placeholder","valueType","contactData","valid","validation","mobileNumber","mobile","landline","formIsValid","orderHandler","e","preventDefault","formData","key","order","totalPrice","customer","userOrderId","onOrderBurger","token","inputChangeHandler","id","updatedOrderForm","updatedFormElement","target","setState","prevProps","prevState","this","orderFormArray","config","form","map","el","loading","Spinner","disabled","Component","connect","burgerBuilder","auth","email","dispatch","orderData","actions","withErrorHandler","axios","Checkout","history","goBack","replace","onFetchContactData","summery","to","purchaseRedirect","redirect","path","match","component"],"mappings":"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","file":"static/js/3.87a0e5f0.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport styles from \"./Input.module.css\";\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  let errorMessage = null;\r\n  let inputClasses = [styles.InputElement];\r\n\r\n  if (props.customClassName) {\r\n    inputClasses = [styles.ContactDataInputElement];\r\n  }\r\n\r\n  if (props.invalid && props.touched) {\r\n    inputClasses.push(styles.Invalid);\r\n    errorMessage = (\r\n      <p\r\n        style={{\r\n          margin: \"5px 0\",\r\n          color: \"red\",\r\n          textAlign: \"left\",\r\n        }}\r\n      >\r\n        {props.errorMessage}\r\n      </p>\r\n    );\r\n  }\r\n\r\n  switch (props.elementtype) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n          onBlur={props.errorHandler}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n          onBlur={props.errorHandler}\r\n        />\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n  }\r\n  return (\r\n    <Fragment>\r\n      {\" \"}\r\n      <div\r\n        className={\r\n          props.customClassName ? styles.ContactDataInput : styles.Input\r\n        }\r\n      >\r\n        <label className={styles.Label}>{props.label}</label>\r\n        <div style={props.customClassName ? { width: \"80%\" } : null}>\r\n          {inputElement}\r\n          {errorMessage}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default input;\r\n","export const inputValidation = (rules, value) => {\r\n  let isValid = true;\r\n  if (rules.required) {\r\n    isValid = value.trim() !== \"\" && isValid;\r\n  }\r\n  if (rules.minLength) {\r\n    isValid = value.length >= rules.minLength && isValid;\r\n  }\r\n  if (rules.maxLength) {\r\n    isValid = value.length <= rules.maxLength && isValid;\r\n  }\r\n  if (rules.isEmail) {\r\n    const pattern = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    isValid = pattern.test(String(value).toLowerCase()) && isValid;\r\n  }\r\n  if (rules.isMobile) {\r\n    const pattern = /^(010|011|012|015)[0-9]{8}$/;\r\n    isValid = pattern.test(String(value).toLowerCase()) && isValid;\r\n  }\r\n  if (rules.isName) {\r\n    const pattern = /^[a-zA-Z]{2,10}$/;\r\n    isValid = pattern.test(String(value).toLowerCase()) && isValid;\r\n  }\r\n\r\n  return isValid;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3Ot8o\",\"ContactDataInput\":\"Input_ContactDataInput__20fua\",\"ContactDataInputElement\":\"Input_ContactDataInputElement__3F5PE\",\"Label\":\"Input_Label__I97OD\",\"InputElement\":\"Input_InputElement__2Oaor\",\"Invalid\":\"Input_Invalid__YGpNO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummery\":\"CheckoutSummery_CheckoutSummery__Rd6ZL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3ZuTq\"};","import React from \"react\";\r\nimport Burger from \"../../Burger/Burger\";\r\nimport Button from \"../../UI/Button/Button\";\r\nimport styles from \"./CheckoutSummery.module.css\";\r\n\r\nconst checkoutSummery = (props) => (\r\n  <div className={styles.CheckoutSummery}>\r\n    <h1>We hope it tastes well!</h1>\r\n    <div style={{ width: \"100%\", margin: \"auto\" }}>\r\n      <Burger ingredients={props.ingredients} />\r\n    </div>\r\n    <Button btnType=\"Danger\" clicked={props.checkoutCanceled}>\r\n      CANCEL\r\n    </Button>\r\n    <Button btnType=\"Success\" clicked={props.checkoutContinued}>\r\n      CONTINUE\r\n    </Button>\r\n  </div>\r\n);\r\n\r\nexport default checkoutSummery;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"../../../axios-orders\";\r\nimport * as actions from \"../../../store/actions/index\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport styles from \"./ContactData.module.css\";\r\nimport withErrorHandler from \"../../../hoc/WithErrorHandler/WithErrorHandler\";\r\nimport { inputValidation } from \"../../../utility/utility\";\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      address: {\r\n        elementType: \"textarea\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Address\",\r\n        },\r\n        valueType: \"Address\",\r\n        errorMessage: \"Please enter a valid Address\",\r\n\r\n        value: this.props.contactData.address,\r\n        valid: true,\r\n        touched: false,\r\n        validation: { required: true, minLength: 6 },\r\n      },\r\n      mobileNumber: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Mobile\",\r\n        },\r\n        valueType: \"Mobile\",\r\n        errorMessage: \"Please enter a valid Mobile\",\r\n\r\n        value: this.props.contactData.mobile,\r\n        valid: true,\r\n        touched: false,\r\n        validation: {\r\n          required: true,\r\n          isMobile: true,\r\n        },\r\n      },\r\n      landline: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Alternative Phone Number (optional)\",\r\n        },\r\n        valueType: \"Phone\",\r\n        value: \"\",\r\n        valid: true,\r\n        validation: {},\r\n        touched: false,\r\n      },\r\n    },\r\n    formIsValid: true,\r\n  };\r\n  componentDidUpdate(prevProps, prevState) {\r\n    let formIsValid = true;\r\n    for (let key in this.state.orderForm) {\r\n      formIsValid = this.state.orderForm[key].valid && formIsValid;\r\n    }\r\n    if (prevState.formIsValid !== formIsValid) {\r\n      this.setState({ formIsValid: formIsValid });\r\n    }\r\n  }\r\n\r\n  orderHandler = (e) => {\r\n    e.preventDefault();\r\n    const formData = {};\r\n    for (let key in this.state.orderForm) {\r\n      formData[key] = this.state.orderForm[key].value;\r\n    }\r\n    const order = {\r\n      ingredients: this.props.ingredients,\r\n      totalPrice: this.props.totalPrice,\r\n      customer: formData,\r\n      userOrderId: this.props.userOrderId,\r\n    };\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  };\r\n\r\n  inputChangeHandler = (e, id) => {\r\n    const updatedOrderForm = { ...this.state.orderForm };\r\n    const updatedFormElement = { ...updatedOrderForm[id] };\r\n    updatedFormElement.value = e.target.value;\r\n    updatedFormElement.valid = inputValidation(\r\n      updatedFormElement.validation,\r\n      updatedFormElement.value\r\n    );\r\n\r\n    updatedOrderForm[id] = updatedFormElement;\r\n    this.setState({ orderForm: updatedOrderForm });\r\n  };\r\n  errorHandler = (id) => {\r\n    const updatedOrderForm = { ...this.state.orderForm };\r\n    const updatedFormElement = { ...updatedOrderForm[id] };\r\n    updatedFormElement.touched = true;\r\n    updatedOrderForm[id] = updatedFormElement;\r\n    this.setState({ orderForm: updatedOrderForm });\r\n  };\r\n\r\n  render() {\r\n    let orderFormArray = [];\r\n    for (let key in this.state.orderForm) {\r\n      orderFormArray.push({ id: key, config: this.state.orderForm[key] });\r\n    }\r\n    let form = (\r\n      <form>\r\n        {orderFormArray.map((el) => {\r\n          return (\r\n            <Input\r\n              customClassName\r\n              errorMessage={el.config.errorMessage}\r\n              invalid={!el.config.valid}\r\n              touched={el.config.touched}\r\n              label={el.config.valueType}\r\n              key={el.id}\r\n              elementtype={el.config.elementType}\r\n              elementConfig={el.config.elementConfig}\r\n              value={el.config.value}\r\n              changed={(e) => this.inputChangeHandler(e, el.id)}\r\n              errorHandler={() => this.errorHandler(el.id)}\r\n            />\r\n          );\r\n        })}\r\n      </form>\r\n    );\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    return (\r\n      <div className={styles.ContactData}>\r\n        <h1>Enter your Contact Data</h1>\r\n        {form}\r\n        <Button\r\n          disabled={!this.state.formIsValid}\r\n          btnType=\"Success\"\r\n          clicked={this.orderHandler}\r\n        >\r\n          ORDER\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ingredients: state.burgerBuilder.ingredients,\r\n    totalPrice: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userOrderId: state.auth.userOrderId,\r\n    contactData: state.auth.contactData,\r\n    email: state.auth.email,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(actions.purchaseStart(orderData, token)),\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\nimport CheckoutSummery from \"../../components/Order/CheckoutSummery/CheckoutSummery\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\nimport * as actions from \"../../store/actions/index\";\r\nclass Checkout extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchContactData(this.props.token, this.props.email);\r\n  }\r\n\r\n  checkoutCanceled = () => {\r\n    this.props.history.goBack();\r\n  };\r\n  checkoutContinued = () => {\r\n    this.props.history.replace(\"/checkout/contact-data\");\r\n  };\r\n\r\n  render() {\r\n    let summery = <Redirect to=\"/\" />;\r\n    const purchaseRedirect = this.props.redirect ? <Redirect to=\"/\" /> : null;\r\n    if (this.props.ingredients) {\r\n      summery = (\r\n        <div>\r\n          <CheckoutSummery\r\n            ingredients={this.props.ingredients}\r\n            checkoutCanceled={this.checkoutCanceled}\r\n            checkoutContinued={this.checkoutContinued}\r\n          />\r\n          <Route\r\n            path={`${this.props.match.path}/contact-data`}\r\n            component={ContactData}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        {purchaseRedirect}\r\n        {summery}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ingredients: state.burgerBuilder.ingredients,\r\n    redirect: state.order.redirect,\r\n    userOrderId: state.auth.userOrderId,\r\n    contactData: state.auth.contactData,\r\n    loading: state.auth.loading,\r\n    token: state.auth.token,\r\n    email: state.auth.email,\r\n  };\r\n};\r\nconst matDispatchToProps = (dispatch) => {\r\n  return {\r\n    onFetchContactData: (token, email) =>\r\n      dispatch(actions.fetchContactData(token, email)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, matDispatchToProps)(Checkout);\r\n"],"sourceRoot":""}