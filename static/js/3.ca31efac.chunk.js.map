{"version":3,"sources":["components/UI/Input/Input.module.css","components/Order/CheckoutSummery/CheckoutSummery.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummery/CheckoutSummery.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","utility/utility.js"],"names":["module","exports","checkoutSummery","props","className","styles","CheckoutSummery","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCanceled","checkoutContinued","ContactData","state","orderForm","address","elementType","elementConfig","type","placeholder","valueType","errorMessage","value","contactData","valid","touched","validation","required","minLength","mobileNumber","mobile","isMobile","landline","formIsValid","orderHandler","e","preventDefault","formData","key","order","totalPrice","customer","userOrderId","onOrderBurger","token","inputChangeHandler","id","updatedOrderForm","updatedFormElement","target","inputValidation","setState","errorHandler","prevProps","prevState","this","orderFormArray","push","config","form","map","el","Input","customClassName","invalid","label","elementtype","changed","loading","Spinner","disabled","Component","connect","burgerBuilder","auth","email","dispatch","orderData","actions","withErrorHandler","axios","Checkout","history","goBack","replace","onFetchContactData","summery","to","purchaseRedirect","redirect","path","match","component","input","inputElement","inputClasses","InputElement","ContactDataInputElement","Invalid","color","textAlign","join","onChange","onBlur","ContactDataInput","Label","rules","isValid","trim","length","maxLength","isEmail","test","String","toLowerCase","isName"],"mappings":"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","file":"static/js/3.ca31efac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1V4hE\",\"ContactDataInput\":\"Input_ContactDataInput__2dU67\",\"ContactDataInputElement\":\"Input_ContactDataInputElement__1GL_K\",\"Label\":\"Input_Label__3DpAD\",\"InputElement\":\"Input_InputElement__rhet_\",\"Invalid\":\"Input_Invalid__ew1WL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummery\":\"CheckoutSummery_CheckoutSummery__Knkie\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__1ZA6b\"};","import React from \"react\";\r\nimport Burger from \"../../Burger/Burger\";\r\nimport Button from \"../../UI/Button/Button\";\r\nimport styles from \"./CheckoutSummery.module.css\";\r\n\r\nconst checkoutSummery = (props) => (\r\n  <div className={styles.CheckoutSummery}>\r\n    <h1>We hope it tastes well!</h1>\r\n    <div style={{ width: \"100%\", margin: \"auto\" }}>\r\n      <Burger ingredients={props.ingredients} />\r\n    </div>\r\n    <Button btnType=\"Danger\" clicked={props.checkoutCanceled}>\r\n      CANCEL\r\n    </Button>\r\n    <Button btnType=\"Success\" clicked={props.checkoutContinued}>\r\n      CONTINUE\r\n    </Button>\r\n  </div>\r\n);\r\n\r\nexport default checkoutSummery;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"../../../axios-orders\";\r\nimport * as actions from \"../../../store/actions/index\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport styles from \"./ContactData.module.css\";\r\nimport withErrorHandler from \"../../../hoc/WithErrorHandler/WithErrorHandler\";\r\nimport { inputValidation } from \"../../../utility/utility\";\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      address: {\r\n        elementType: \"textarea\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Address\",\r\n        },\r\n        valueType: \"Address\",\r\n        errorMessage: \"Please enter a valid Address\",\r\n\r\n        value: this.props.contactData.address,\r\n        valid: true,\r\n        touched: false,\r\n        validation: { required: true, minLength: 6 },\r\n      },\r\n      mobileNumber: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Mobile\",\r\n        },\r\n        valueType: \"Phone\",\r\n        errorMessage: \"Please enter a valid Mobile\",\r\n\r\n        value: this.props.contactData.mobile,\r\n        valid: true,\r\n        touched: false,\r\n        validation: {\r\n          required: true,\r\n          isMobile: true,\r\n        },\r\n      },\r\n      landline: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Landline Number (optional)\",\r\n        },\r\n        valueType: \"Landline\",\r\n        value: \"\",\r\n        valid: true,\r\n        validation: {},\r\n        touched: false,\r\n      },\r\n    },\r\n    formIsValid: true,\r\n  };\r\n  componentDidUpdate(prevProps, prevState) {\r\n    let formIsValid = true;\r\n    for (let key in this.state.orderForm) {\r\n      formIsValid = this.state.orderForm[key].valid && formIsValid;\r\n    }\r\n    if (prevState.formIsValid !== formIsValid) {\r\n      this.setState({ formIsValid: formIsValid });\r\n    }\r\n  }\r\n\r\n  orderHandler = (e) => {\r\n    e.preventDefault();\r\n    const formData = {};\r\n    for (let key in this.state.orderForm) {\r\n      formData[key] = this.state.orderForm[key].value;\r\n    }\r\n    const order = {\r\n      ingredients: this.props.ingredients,\r\n      totalPrice: this.props.totalPrice,\r\n      customer: formData,\r\n      userOrderId: this.props.userOrderId,\r\n    };\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  };\r\n\r\n  inputChangeHandler = (e, id) => {\r\n    const updatedOrderForm = { ...this.state.orderForm };\r\n    const updatedFormElement = { ...updatedOrderForm[id] };\r\n    updatedFormElement.value = e.target.value;\r\n    updatedFormElement.valid = inputValidation(\r\n      updatedFormElement.validation,\r\n      updatedFormElement.value\r\n    );\r\n\r\n    updatedOrderForm[id] = updatedFormElement;\r\n    this.setState({ orderForm: updatedOrderForm });\r\n  };\r\n  errorHandler = (id) => {\r\n    const updatedOrderForm = { ...this.state.orderForm };\r\n    const updatedFormElement = { ...updatedOrderForm[id] };\r\n    updatedFormElement.touched = true;\r\n    updatedOrderForm[id] = updatedFormElement;\r\n    this.setState({ orderForm: updatedOrderForm });\r\n  };\r\n\r\n  render() {\r\n    let orderFormArray = [];\r\n    for (let key in this.state.orderForm) {\r\n      orderFormArray.push({ id: key, config: this.state.orderForm[key] });\r\n    }\r\n    let form = (\r\n      <form>\r\n        {orderFormArray.map((el) => {\r\n          return (\r\n            <Input\r\n              customClassName\r\n              errorMessage={el.config.errorMessage}\r\n              invalid={!el.config.valid}\r\n              touched={el.config.touched}\r\n              label={el.config.valueType}\r\n              key={el.id}\r\n              elementtype={el.config.elementType}\r\n              elementConfig={el.config.elementConfig}\r\n              value={el.config.value}\r\n              changed={(e) => this.inputChangeHandler(e, el.id)}\r\n              errorHandler={() => this.errorHandler(el.id)}\r\n            />\r\n          );\r\n        })}\r\n      </form>\r\n    );\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    return (\r\n      <div className={styles.ContactData}>\r\n        <h1>Enter your Contact Data</h1>\r\n        {form}\r\n        <Button\r\n          disabled={!this.state.formIsValid}\r\n          btnType=\"Success\"\r\n          clicked={this.orderHandler}\r\n        >\r\n          ORDER\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ingredients: state.burgerBuilder.ingredients,\r\n    totalPrice: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userOrderId: state.auth.userOrderId,\r\n    contactData: state.auth.contactData,\r\n    email: state.auth.email,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(actions.purchaseStart(orderData, token)),\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\nimport CheckoutSummery from \"../../components/Order/CheckoutSummery/CheckoutSummery\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\nimport * as actions from \"../../store/actions/index\";\r\nclass Checkout extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchContactData(this.props.token, this.props.email);\r\n  }\r\n\r\n  checkoutCanceled = () => {\r\n    this.props.history.goBack();\r\n  };\r\n  checkoutContinued = () => {\r\n    this.props.history.replace(\"/checkout/contact-data\");\r\n  };\r\n\r\n  render() {\r\n    let summery = <Redirect to=\"/\" />;\r\n    const purchaseRedirect = this.props.redirect ? <Redirect to=\"/\" /> : null;\r\n    if (this.props.ingredients) {\r\n      summery = (\r\n        <div>\r\n          <CheckoutSummery\r\n            ingredients={this.props.ingredients}\r\n            checkoutCanceled={this.checkoutCanceled}\r\n            checkoutContinued={this.checkoutContinued}\r\n          />\r\n          <Route\r\n            path={`${this.props.match.path}/contact-data`}\r\n            component={ContactData}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        {purchaseRedirect}\r\n        {summery}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ingredients: state.burgerBuilder.ingredients,\r\n    redirect: state.order.redirect,\r\n    userOrderId: state.auth.userOrderId,\r\n    contactData: state.auth.contactData,\r\n    loading: state.auth.loading,\r\n    token: state.auth.token,\r\n    email: state.auth.email,\r\n  };\r\n};\r\nconst matDispatchToProps = (dispatch) => {\r\n  return {\r\n    onFetchContactData: (token, email) =>\r\n      dispatch(actions.fetchContactData(token, email)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, matDispatchToProps)(Checkout);\r\n","import React, { Fragment } from \"react\";\r\nimport styles from \"./Input.module.css\";\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  let errorMessage = null;\r\n  let inputClasses = [styles.InputElement];\r\n\r\n  if (props.customClassName) {\r\n    inputClasses = [styles.ContactDataInputElement];\r\n  }\r\n\r\n  if (props.invalid && props.touched) {\r\n    inputClasses.push(styles.Invalid);\r\n    errorMessage = (\r\n      <p\r\n        style={{\r\n          margin: \"5px 0\",\r\n          color: \"red\",\r\n          textAlign: \"left\",\r\n        }}\r\n      >\r\n        {props.errorMessage}\r\n      </p>\r\n    );\r\n  }\r\n\r\n  switch (props.elementtype) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n          onBlur={props.errorHandler}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n          onBlur={props.errorHandler}\r\n        />\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n  }\r\n  return (\r\n    <Fragment>\r\n      {\" \"}\r\n      <div\r\n        className={\r\n          props.customClassName ? styles.ContactDataInput : styles.Input\r\n        }\r\n      >\r\n        <label className={styles.Label}>{props.label}</label>\r\n        <div style={props.customClassName ? { width: \"80%\" } : null}>\r\n          {inputElement}\r\n          {errorMessage}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default input;\r\n","export const inputValidation = (rules, value) => {\r\n  let isValid = true;\r\n  if (rules.required) {\r\n    isValid = value.trim() !== \"\" && isValid;\r\n  }\r\n  if (rules.minLength) {\r\n    isValid = value.length >= rules.minLength && isValid;\r\n  }\r\n  if (rules.maxLength) {\r\n    isValid = value.length <= rules.maxLength && isValid;\r\n  }\r\n  if (rules.isEmail) {\r\n    const pattern = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    isValid = pattern.test(String(value).toLowerCase()) && isValid;\r\n  }\r\n  if (rules.isMobile) {\r\n    const pattern = /^(010|011|012|015)[0-9]{8}$/;\r\n    isValid = pattern.test(String(value).toLowerCase()) && isValid;\r\n  }\r\n  if (rules.isName) {\r\n    const pattern = /^[a-zA-Z]{2,10}$/;\r\n    isValid = pattern.test(String(value).toLowerCase()) && isValid;\r\n  }\r\n\r\n  return isValid;\r\n};\r\n"],"sourceRoot":""}