{"version":3,"sources":["components/UI/Input/Input.js","utility/utility.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Login/Login.js","containers/Auth/Auth.js"],"names":["input","props","inputElement","errorMessage","inputClasses","styles","InputElement","customClassName","ContactDataInputElement","invalid","touched","push","Invalid","style","margin","color","textAlign","elementtype","className","join","elementConfig","value","onChange","changed","onBlur","errorHandler","ContactDataInput","Input","Label","label","width","inputValidation","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","String","toLowerCase","isMobile","isName","module","exports","Login","state","controls","email","elementType","type","placeholder","valid","validation","password","formIsValid","isSignup","inputChangeHandler","e","id","updatedRegisterForm","updatedFormElement","target","setState","submitHandler","preventDefault","onAuth","switchHandler","onSwitch","prevProps","prevState","key","this","registerFormArray","config","form","map","el","error","message","fontWeight","loading","Spinner","loginPage","Auth","onSubmit","Button","disabled","btnType","clicked","isAuth","to","building","Component","connect","auth","token","burgerBuilder","userOrderId","dispatch","actions","userName","rePassword","address","mobile","confirmPassword","contactData","authPage"],"mappings":"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","file":"static/js/4.1784d88f.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport styles from \"./Input.module.css\";\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  let errorMessage = null;\r\n  let inputClasses = [styles.InputElement];\r\n\r\n  if (props.customClassName) {\r\n    inputClasses = [styles.ContactDataInputElement];\r\n  }\r\n\r\n  if (props.invalid && props.touched) {\r\n    inputClasses.push(styles.Invalid);\r\n    errorMessage = (\r\n      <p\r\n        style={{\r\n          margin: \"5px 0\",\r\n          color: \"red\",\r\n          textAlign: \"left\",\r\n        }}\r\n      >\r\n        {props.errorMessage}\r\n      </p>\r\n    );\r\n  }\r\n\r\n  switch (props.elementtype) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n          onBlur={props.errorHandler}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n          onBlur={props.errorHandler}\r\n        />\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n  }\r\n  return (\r\n    <Fragment>\r\n      {\" \"}\r\n      <div\r\n        className={\r\n          props.customClassName ? styles.ContactDataInput : styles.Input\r\n        }\r\n      >\r\n        <label className={styles.Label}>{props.label}</label>\r\n        <div style={props.customClassName ? { width: \"80%\" } : null}>\r\n          {inputElement}\r\n          {errorMessage}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default input;\r\n","export const inputValidation = (rules, value) => {\r\n  let isValid = true;\r\n  if (rules.required) {\r\n    isValid = value.trim() !== \"\" && isValid;\r\n  }\r\n  if (rules.minLength) {\r\n    isValid = value.length >= rules.minLength && isValid;\r\n  }\r\n  if (rules.maxLength) {\r\n    isValid = value.length <= rules.maxLength && isValid;\r\n  }\r\n  if (rules.isEmail) {\r\n    const pattern = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    isValid = pattern.test(String(value).toLowerCase()) && isValid;\r\n  }\r\n  if (rules.isMobile) {\r\n    const pattern = /^(010|011|012|015)[0-9]{8}$/;\r\n    isValid = pattern.test(String(value).toLowerCase()) && isValid;\r\n  }\r\n  if (rules.isName) {\r\n    const pattern = /^[a-zA-Z]{2,10}$/;\r\n    isValid = pattern.test(String(value).toLowerCase()) && isValid;\r\n  }\r\n\r\n  return isValid;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3Ot8o\",\"ContactDataInput\":\"Input_ContactDataInput__20fua\",\"ContactDataInputElement\":\"Input_ContactDataInputElement__3F5PE\",\"Label\":\"Input_Label__I97OD\",\"InputElement\":\"Input_InputElement__2Oaor\",\"Invalid\":\"Input_Invalid__YGpNO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1pWX-\"};","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport styles from \"../Auth.module.css\";\r\nimport * as actions from \"../../../store/actions/index\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport { inputValidation } from \"../../../utility/utility\";\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your E-mail\",\r\n        },\r\n        errorMessage: \"Please enter a valid E-mail\",\r\n        value: \"\",\r\n        valid: false,\r\n        validation: { required: true, isEmail: true },\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n        },\r\n        errorMessage: \"Please enter a Password\",\r\n        value: \"\",\r\n        valid: false,\r\n        validation: { required: true, minLength: 6 },\r\n        touched: false,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n    isSignup: true,\r\n  };\r\n  componentDidUpdate(prevProps, prevState) {\r\n    let formIsValid = true;\r\n    for (let key in this.state.controls) {\r\n      formIsValid = this.state.controls[key].valid && formIsValid;\r\n    }\r\n    if (prevState.formIsValid !== formIsValid) {\r\n      this.setState({ formIsValid: formIsValid });\r\n    }\r\n  }\r\n\r\n  inputChangeHandler = (e, id) => {\r\n    const updatedRegisterForm = { ...this.state.controls };\r\n    const updatedFormElement = { ...updatedRegisterForm[id] };\r\n    updatedFormElement.value = e.target.value;\r\n    updatedFormElement.valid = inputValidation(\r\n      updatedFormElement.validation,\r\n      updatedFormElement.value\r\n    );\r\n    updatedRegisterForm[id] = updatedFormElement;\r\n    this.setState({ controls: updatedRegisterForm });\r\n  };\r\n\r\n  errorHandler = (id) => {\r\n    const updatedRegisterForm = { ...this.state.controls };\r\n    const updatedFormElement = { ...updatedRegisterForm[id] };\r\n    updatedFormElement.touched = true;\r\n    updatedRegisterForm[id] = updatedFormElement;\r\n    this.setState({ controls: updatedRegisterForm });\r\n  };\r\n\r\n  submitHandler = (e) => {\r\n    e.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.props.isSignup\r\n    );\r\n  };\r\n\r\n  switchHandler = () => {\r\n    this.props.onSwitch();\r\n  };\r\n\r\n  render() {\r\n    let registerFormArray = [];\r\n    for (let key in this.state.controls) {\r\n      registerFormArray.push({ id: key, config: this.state.controls[key] });\r\n    }\r\n    let form = (\r\n      <Fragment>\r\n        {registerFormArray.map((el) => {\r\n          return (\r\n            <Input\r\n              invalid={!el.config.valid}\r\n              touched={el.config.touched}\r\n              errorMessage={el.config.errorMessage}\r\n              key={el.id}\r\n              elementtype={el.config.elementType}\r\n              elementConfig={el.config.elementConfig}\r\n              value={el.config.value}\r\n              changed={(e) => this.inputChangeHandler(e, el.id)}\r\n              errorHandler={() => this.errorHandler(el.id)}\r\n            />\r\n          );\r\n        })}\r\n      </Fragment>\r\n    );\r\n\r\n    let errorMessage = null;\r\n    if (this.props.error) {\r\n      if (this.props.error.message === \"EMAIL_NOT_FOUND\") {\r\n        errorMessage = (\r\n          <p style={{ fontWeight: \"500\", color: \"red\" }}>\r\n            This Email doesn't exist\r\n          </p>\r\n        );\r\n      }\r\n      if (this.props.error.message === \"INVALID_PASSWORD\") {\r\n        errorMessage = (\r\n          <p style={{ fontWeight: \"500\", color: \"red\" }}>Wrong Password</p>\r\n        );\r\n      }\r\n    }\r\n    if (this.props.loading && this.props.error == null) {\r\n      form = <Spinner />;\r\n    }\r\n    let loginPage = (\r\n      <div className={styles.Auth}>\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          {errorMessage}\r\n          <Button disabled={!this.state.formIsValid} btnType=\"Success\">\r\n            SUBMIT\r\n          </Button>\r\n        </form>\r\n        <Button btnType=\"Success\" clicked={this.switchHandler}>\r\n          SWITCH TO {this.props.isSignup ? \"SIGNIN\" : \"SIGNUP\"}\r\n        </Button>\r\n      </div>\r\n    );\r\n    if (this.props.isAuth) {\r\n      loginPage = <Redirect to=\"/\" />;\r\n      if (this.props.building) {\r\n        loginPage = <Redirect to=\"checkout\" />;\r\n      }\r\n    }\r\n\r\n    return loginPage;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuth: state.auth.token !== null,\r\n    building: state.burgerBuilder.building,\r\n    userOrderId: state.auth.userOrderId,\r\n    isSignup: state.auth.isSignup,\r\n    email: state.auth.email,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(actions.auth(email, password, isSignup)),\r\n    onSwitch: () => dispatch(actions.authSwitch()),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport styles from \"./Auth.module.css\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport { inputValidation } from \"../../utility/utility\";\r\nimport Login from \"./Login/Login\";\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      userName: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Name\",\r\n        },\r\n        errorMessage: \"Please enter a valid Name\",\r\n        value: \"\",\r\n        valid: false,\r\n        validation: { required: true, isName: true },\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your E-mail\",\r\n        },\r\n        errorMessage: \"Please enter a valid E-mail\",\r\n        value: \"\",\r\n        valid: false,\r\n        validation: { required: true, isEmail: true },\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n        },\r\n        errorMessage: \"Please enter a valid Password\",\r\n        value: \"\",\r\n        valid: false,\r\n        validation: { required: true, minLength: 6 },\r\n        touched: false,\r\n      },\r\n      rePassword: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Re-Password\",\r\n        },\r\n        errorMessage: \"Password doesn't match\",\r\n        value: \"\",\r\n        valid: false,\r\n        validation: { required: true, minLength: 6 },\r\n        touched: false,\r\n      },\r\n\r\n      address: {\r\n        elementType: \"textarea\",\r\n        elementConfig: {\r\n          type: \"textarea\",\r\n          placeholder: \"Your Address\",\r\n        },\r\n        errorMessage: \"Please enter a valid Address\",\r\n        value: \"\",\r\n        valid: false,\r\n        validation: { required: true, minLength: 6 },\r\n        touched: false,\r\n      },\r\n      mobile: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Mobile\",\r\n        },\r\n        errorMessage: \"Please enter a valid Mobile\",\r\n        value: \"\",\r\n        valid: false,\r\n        validation: { required: true, isMobile: true },\r\n        touched: false,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n    isSignup: true,\r\n  };\r\n  componentDidUpdate(prevProps, prevState) {\r\n    let formIsValid = true;\r\n    for (let key in this.state.controls) {\r\n      formIsValid = this.state.controls[key].valid && formIsValid;\r\n    }\r\n    if (prevState.formIsValid !== formIsValid) {\r\n      this.setState({ formIsValid: formIsValid });\r\n    }\r\n  }\r\n\r\n  inputChangeHandler = (e, id) => {\r\n    const updatedRegisterForm = { ...this.state.controls };\r\n    const updatedFormElement = { ...updatedRegisterForm[id] };\r\n    updatedFormElement.value = e.target.value;\r\n    updatedFormElement.valid = inputValidation(\r\n      updatedFormElement.validation,\r\n      updatedFormElement.value\r\n    );\r\n    updatedRegisterForm[id] = updatedFormElement;\r\n\r\n    const password = { ...updatedRegisterForm.password };\r\n    const confirmPassword = { ...updatedRegisterForm.rePassword };\r\n    if (confirmPassword.value !== password.value) {\r\n      confirmPassword.valid = false;\r\n    } else {\r\n      confirmPassword.valid = true;\r\n    }\r\n    updatedRegisterForm.rePassword = confirmPassword;\r\n\r\n    this.setState({ controls: updatedRegisterForm });\r\n  };\r\n  errorHandler = (id) => {\r\n    const updatedRegisterForm = { ...this.state.controls };\r\n    const updatedFormElement = { ...updatedRegisterForm[id] };\r\n    updatedFormElement.touched = true;\r\n    updatedRegisterForm[id] = updatedFormElement;\r\n    this.setState({ controls: updatedRegisterForm });\r\n  };\r\n  submitHandler = (e) => {\r\n    e.preventDefault();\r\n    const contactData = {\r\n      userName: this.state.controls.userName.value,\r\n      email: this.state.controls.email.value,\r\n      mobile: this.state.controls.mobile.value,\r\n      address: this.state.controls.address.value,\r\n    };\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.props.isSignup,\r\n      contactData\r\n    );\r\n  };\r\n\r\n  switchHandler = (e) => {\r\n    this.props.onSwitch();\r\n  };\r\n\r\n  render() {\r\n    let registerFormArray = [];\r\n    for (let key in this.state.controls) {\r\n      registerFormArray.push({ id: key, config: this.state.controls[key] });\r\n    }\r\n    let form = (\r\n      <Fragment>\r\n        {registerFormArray.map((el) => {\r\n          return (\r\n            <Input\r\n              invalid={!el.config.valid}\r\n              touched={el.config.touched}\r\n              errorMessage={el.config.errorMessage}\r\n              key={el.id}\r\n              elementtype={el.config.elementType}\r\n              elementConfig={el.config.elementConfig}\r\n              value={el.config.value}\r\n              changed={(e) => this.inputChangeHandler(e, el.id)}\r\n              errorHandler={() => this.errorHandler(el.id)}\r\n            />\r\n          );\r\n        })}\r\n      </Fragment>\r\n    );\r\n\r\n    let errorMessage = null;\r\n    if (this.props.error) {\r\n      if (this.props.error.message === \"EMAIL_EXISTS\") {\r\n        errorMessage = (\r\n          <p style={{ fontWeight: \"500\", color: \"red\" }}>\r\n            This Email is already exists\r\n          </p>\r\n        );\r\n      }\r\n      if (this.props.error.message === \"INVALID_PASSWORD\") {\r\n        errorMessage = (\r\n          <p style={{ fontWeight: \"500\", color: \"red\" }}>Wrong Password</p>\r\n        );\r\n      }\r\n    }\r\n    if (this.props.loading && this.props.error == null) {\r\n      form = <Spinner />;\r\n    }\r\n    let authPage = (\r\n      <div className={styles.Auth}>\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          {errorMessage}\r\n          <Button disabled={!this.state.formIsValid} btnType=\"Success\">\r\n            SUBMIT\r\n          </Button>\r\n        </form>\r\n        <Button btnType=\"Success\" clicked={this.switchHandler}>\r\n          SWITCH TO {this.props.isSignup ? \"SIGNIN\" : \"SIGNUP\"}\r\n        </Button>\r\n      </div>\r\n    );\r\n    if (this.props.isAuth) {\r\n      authPage = <Redirect to=\"/\" />;\r\n      if (this.props.building) {\r\n        authPage = <Redirect to=\"checkout\" />;\r\n      }\r\n    }\r\n    if (!this.props.isSignup) {\r\n      authPage = <Login />;\r\n    }\r\n\r\n    return authPage;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuth: state.auth.token !== null,\r\n    building: state.burgerBuilder.building,\r\n    userOrderId: state.auth.userOrderId,\r\n    isSignup: state.auth.isSignup,\r\n    token: state.auth.token,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignup, contactData) =>\r\n      dispatch(actions.auth(email, password, isSignup, contactData)),\r\n    onSwitch: () => dispatch(actions.authSwitch()),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}